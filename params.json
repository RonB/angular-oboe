{"name":"Angular-oboe","tagline":"Stream JSON data ","body":"# angular-oboe\r\n\r\n[![Join the chat at https://gitter.im/RonB/angular-oboe](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/RonB/angular-oboe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nA service to stream JSON data to an array in your controller by using the Oboe.js library.\r\n\r\nThis repo is for distribution on `bower`. \r\n\r\nMany thanks to Jim Higson for the oboe.js library.\r\nSee http://www.oboejs.com\r\n\r\n## What it does\r\nThe Oboe service collects a datastream and tries to parse the data as JSON objects.\r\nYou can pass a URL and a pattern to the service, which will return a promise. By processing the notification immediately in your scope, the user will experience your application as very fast, especially on mobile.\r\n\r\nThe module takes advantage of the defer and promise implementation of Angular and the Oboe.js library.\r\nThe Oboe library parses the JSON stream and recognizes the nodes which meets the criteria in the supplied pattern.\r\nThe module then collects the JSON objects and notifies the promise of the new node.\r\n\r\n## Install\r\n\r\n### To try the example:\r\n\r\nMake sure you have the following installed:\r\n\r\n* node with npm (for building the example and running the local server)\r\n* bower (for dependency management)\r\n* grunt (for running the node tasks)\r\n\r\n```shell\r\ngit clone https://github.com/RonB/angular-oboe.git\r\ncd angular-oboe\r\nnpm install\r\nbower install\r\ngrunt\r\n```\r\nNow go to a browser and visit http://localhost:9000 \r\n\r\n\r\n### Add module to your project using `bower`\r\n\r\nGo to your project folder and run\r\n\r\n```shell\r\nbower install angular-oboe --save\r\n```\r\n\r\nAdd a `<script>` to your `index.html`:\r\n\r\n```html\r\n<script src=\"/bower_components/angular-oboe/dist/angular-oboe.min.js\"></script>\r\n```\r\n\r\nAnd add `ngOboe` module to your app:\r\n\r\n```javascript\r\nangular.module('myApp', ['ngOboe']);\r\n```\r\n\r\n## Usage\r\n\r\nIn your controller you add data to your scope by calling the Oboe service. This returns a promise.\r\nThe service is called with an object that contains the parameters for the Oboe service.\r\nThey  are the same as the oboe.js API [http://oboejs.com/api].\r\n\r\n### url:string\r\nspecify the url from which the json data should be read\r\n\r\n### pattern:string\r\nThe pattern is to select JSON objects that meet that pattern.\r\nhttp://oboejs.com/api#pattern-matching\r\n\r\n### start:function\r\nCallback function which is called when the stream starts with a handle to the stream as a parameter.\r\nThe stream has several functions and events. \r\ni.e: If you want to abort the stream while loading you can call the abort() method (http://oboejs.com/api#-abort-).\r\n\r\n### done:function\r\nCallback function which is called when the stream end.\r\n\r\n## Returned promise\r\nTo use the data in your controller you call the then function of the returned promise.\r\n\r\nYou can pass three functions:\r\n1. The first one will never be called as the service will not resolve the promise. Specify an empty function.\r\n2. The second function is called when there is an error,\r\n3. The third function is called when a JSON object meeting the pattern is received. Use this function add the object to your scope.\r\n\r\n```javascript\r\nangular.module('MyApp')\r\n    .controller(['$scope', 'Oboe', function($scope, Oboe) {\r\n        $scope.myData = [];\r\n        Oboe({\r\n            url: '/api/myData',\r\n            pattern: '{index}',\r\n            start: function(stream) {\r\n                // handle to the stream\r\n                $scope.stream = stream;\r\n                $scope.status = 'started';\r\n            },\r\n            done: function() {\r\n                $scope.status = 'done';\r\n            }\r\n        }).then(function() {\r\n            // finished loading\r\n        }, function(error) {\r\n            // handle errors\r\n        }, function(node) {\r\n            // node received\r\n            $scope.myData.push(node);\r\n            if($scope.myData.length === 1000) {\r\n                $scope.stream.abort();\r\n                alert('The maximum of one thousand records reached');\r\n            }\r\n        });\r\n    }]);\r\n```\r\n\r\nThe entire parameter object will be passed to the Oboe funtion [http://oboejs.com/api].\r\nUse this to accomplish authentication with the backend:\r\n\r\n```javascript\r\nangular.module('MyApp')\r\n    .controller(['$scope', 'Oboe', function($scope, Oboe) {\r\n        $scope.myData = [];\r\n        Oboe({\r\n            url: '/api/myData',\r\n            pattern: '{index}',\r\n            withCredentials: true,\r\n            headers: {\r\n                Authentication: 'Basic '  + btoa('yourusername:yourpassword')\r\n            }\r\n        }).then(function() {\r\n            // finished loading\r\n        }, function(error) {\r\n            // handle errors\r\n        }, function(node) {\r\n            // node received\r\n            $scope.myData.push(node);\r\n        });\r\n    }]);\r\n```\r\n\r\n## Caveats\r\n\r\nParsing the entire datastream might take longer if the JSON is served in one chunk because parsing the\r\ndata in JS is slower than the standard native parsing in the browser. It might use more CPU than desired in that case.\r\n\r\n\r\n## TODO:\r\nThis factory is in a very early stage.\r\nStill to do:\r\n\r\n* error handling\r\n* test code\r\n* documentation\r\n\r\nContributers to the project are very welcome!\r\n\r\n## License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2010-2012 Google, Inc. http://angularjs.org\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}